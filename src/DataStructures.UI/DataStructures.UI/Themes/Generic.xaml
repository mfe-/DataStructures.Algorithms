<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:DataStructures.UI">


    <Style TargetType="{x:Type local:GraphControl}">
        <!--<Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:GraphVisualization}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">

          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>-->

    </Style>

    <!--
    ControlTemplate of VertexVisualization
    -->
    <Style TargetType="{x:Type local:VertexControl}">
        <Style.Resources>
            <Storyboard x:Key="FocusColorAnimation">
                <ColorAnimation Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)" To="Red" AutoReverse="True" Duration="00:00:02.000" />
            </Storyboard>
            <Storyboard  x:Key="BorderThicknessAnimationDown">
                <ThicknessAnimation Storyboard.TargetProperty="BorderThickness"  From="1,1,1,1" To="2,2,2,2" FillBehavior="Stop" Duration="00:00:02.000" />
            </Storyboard>
            <Storyboard x:Key="BorderThicknessAnimationUp">
                <ThicknessAnimation Storyboard.TargetProperty="BorderThickness"  From="2,2,2,2" To="1,1,1,1" FillBehavior="HoldEnd" Duration="00:00:02.000" />
            </Storyboard>
            <ControlTemplate  x:Key="VertexVisualizationTextBox" TargetType="{x:Type local:VertexControl}">
                <Border x:Name="PART_Border" 
                        CornerRadius="0"
                        Height="{TemplateBinding Height}" 
                        Width="{TemplateBinding Width}"
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch">
                    <Border.Resources>
                        <Style TargetType="Border">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsFocused,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:VertexControl}},UpdateSourceTrigger=PropertyChanged}" Value="True">
                                     <DataTrigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource BorderThicknessAnimationDown}"/>
                                    </DataTrigger.EnterActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Resources>
                    <StackPanel Name="PART_InnerBorderStackPanel"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <!--
                            into this stackpanel the itemtemplate will be placed
                        -->
                        <!--<TextBox x:Name="PART_TextBoxWeighted"
                                    Text="{Binding Mode=TwoWay,Path=Vertex.Weighted,UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:VertexControl}}
                                    ,Converter={x:Static local:VertexControl.IntToStringConverter}}" />-->
                    </StackPanel>
                </Border>
                <ControlTemplate.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard>
                                <!--dont use this animations! it sets the width/height hardcoded to 40
                                <DoubleAnimation Storyboard.TargetProperty="Width" From="0" To="40" Duration="0:0:0.25" AutoReverse="False"/>
                                <DoubleAnimation Storyboard.TargetProperty="Height" From="0" To="40" Duration="0:0:0.25" AutoReverse="False"/>-->
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.9000000" Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                    <EventTrigger RoutedEvent="GotFocus">
                        <BeginStoryboard>
                            <Storyboard>
                                <ThicknessAnimation Storyboard.TargetProperty="BorderThickness"  From="1,1,1,1" To="2,2,2,2" FillBehavior="Stop" Duration="00:00:02.000" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                    <EventTrigger RoutedEvent="LostFocus">
                        <BeginStoryboard>
                            <Storyboard>
                                <ThicknessAnimation Storyboard.TargetProperty="BorderThickness"  From="2,2,2,2" To="1,1,1,1" FillBehavior="HoldEnd" Duration="00:00:02.000" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Style.Triggers>
        </Style.Triggers>
        <Setter Property="Opacity" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template" Value="{StaticResource VertexVisualizationTextBox}" />
    </Style>

    <!--
    ControlTemplate of EdgeVisualization
    -->
    <Style TargetType="{x:Type local:EdgeControl}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="StrokeThickness" Value="5" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="StrokeThickness" Value="5" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="StrokeThickness" Value="5" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:EdgeControl}">
                    <DockPanel>
                        <!--use when local:EdgeVisualization.Directed=true-->
                        <local:Arrow x:Name="PART_Arrow" Grid.Column="0"  Stroke="{TemplateBinding Foreground}" StrokeThickness="{TemplateBinding StrokeThickness}" HeadWidth="10" HeadHeight="10"
                        Point1="{Binding Mode=TwoWay,Path=PositionU,UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:EdgeControl}}}"
                                     Focusable="{TemplateBinding Focusable}">
                            <local:Arrow.Point2>
                                <!--Because Point1 and Point2 are the coordinates to the vertex center, we have to calculate the right coordinates with the converter-->
                                <MultiBinding Converter="{x:Static local:EdgeControl.ShiftConverter}" Mode="OneWay" NotifyOnSourceUpdated="False" UpdateSourceTrigger="PropertyChanged">
                                    <Binding Path="PositionU" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type local:EdgeControl}}" />
                                    <Binding Path="PositionV" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type local:EdgeControl}}" />
                                </MultiBinding>
                            </local:Arrow.Point2>
                        </local:Arrow>

                        <!--use when local:EdgeVisualization.Directed=false-->
                        <Line x:Name="PART_Line" Grid.Column="0"  Stroke="{TemplateBinding Foreground}" StrokeThickness="{TemplateBinding StrokeThickness}" Focusable="{TemplateBinding Focusable}"
                        X1="{Binding Mode=TwoWay,Path=PositionU.X,UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:EdgeControl}}}"
                        Y1="{Binding Mode=TwoWay,Path=PositionU.Y,UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:EdgeControl}}}"
                        X2="{Binding Mode=TwoWay,Path=PositionV.X,UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:EdgeControl}}}"
                        Y2="{Binding Mode=TwoWay,Path=PositionV.Y,UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:EdgeControl}}}" >
                        </Line>
                        <!--<TextBlock Text="{Binding Mode=TwoWay,Path=Edge.Weighted,UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:EdgeVisualization}}}" VerticalAlignment="Center" HorizontalAlignment="Center" DockPanel.Dock="Bottom" />-->
                        <!--<Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Center" Fill="Blue" Panel.ZIndex="5" Width="20" Height="5"/>-->
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Directed" Value="True">
                            <Setter TargetName="PART_Line" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Directed" Value="False">
                            <Setter TargetName="PART_Line" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Directed" Value="False">
                            <Setter TargetName="PART_Arrow" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Directed" Value="True">
                            <Setter TargetName="PART_Arrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <EventTrigger RoutedEvent="Loaded">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.9000000" Value="1" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="GotFocus">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ThicknessAnimation Storyboard.TargetProperty="BorderThickness"  From="1,1,1,1" To="2,2,2,2" FillBehavior="Stop" Duration="00:00:02.000" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="LostFocus">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ThicknessAnimation Storyboard.TargetProperty="BorderThickness"  From="2,2,2,2" To="1,1,1,1" FillBehavior="HoldEnd" Duration="00:00:02.000" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Opacity" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>

</ResourceDictionary>
